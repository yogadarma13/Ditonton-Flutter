// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton/test/presentation/provider/movie_detail_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i5;
import 'package:ditonton/domain/entities/movie.dart' as _i9;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i6;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i3;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart' as _i8;
import 'package:ditonton/domain/usecases/get_tv_series_detail.dart' as _i7;
import 'package:ditonton/domain/usecases/get_tv_series_recommendations.dart'
    as _i10;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i11;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i13;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetMovieDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetailUseCase extends _i1.Mock
    implements _i3.GetMovieDetailUseCase {
  MockGetMovieDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.MovieDetail>>.value(
              _FakeEither_0<_i5.Failure, _i6.MovieDetail>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.MovieDetail>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetTvSeriesDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvSeriesDetailUseCase extends _i1.Mock
    implements _i7.GetTvSeriesDetailUseCase {
  MockGetTvSeriesDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.MovieDetail>>.value(
              _FakeEither_0<_i5.Failure, _i6.MovieDetail>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.MovieDetail>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetMovieRecommendationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendationsUseCase extends _i1.Mock
    implements _i8.GetMovieRecommendationsUseCase {
  MockGetMovieRecommendationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i5.Failure, List<_i9.Movie>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i9.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetTvSeriesRecommendationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvSeriesRecommendationsUseCase extends _i1.Mock
    implements _i10.GetTvSeriesRecommendationsUseCase {
  MockGetTvSeriesRecommendationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i5.Failure, List<_i9.Movie>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i9.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetWatchListStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusUseCase extends _i1.Mock
    implements _i11.GetWatchListStatusUseCase {
  MockGetWatchListStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SaveWatchlistUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistUseCase extends _i1.Mock
    implements _i12.SaveWatchlistUseCase {
  MockSaveWatchlistUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> execute(_i6.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither_0<_i5.Failure, String>()))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoveWatchlistUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistUseCase extends _i1.Mock
    implements _i13.RemoveWatchlistUseCase {
  MockRemoveWatchlistUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> execute(_i6.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither_0<_i5.Failure, String>()))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  String toString() => super.toString();
}
