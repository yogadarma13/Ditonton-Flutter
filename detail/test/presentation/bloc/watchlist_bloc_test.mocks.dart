// Mocks generated by Mockito 5.1.0 from annotations
// in detail/test/presentation/bloc/watchlist_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:core/domain/entities/movie_detail.dart' as _i7;
import 'package:core/utils/failure.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:detail/domain/usecases/get_watchlist_status.dart' as _i3;
import 'package:detail/domain/usecases/remove_watchlist.dart' as _i8;
import 'package:detail/domain/usecases/save_watchlist.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetWatchListStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusUseCase extends _i1.Mock
    implements _i3.GetWatchListStatusUseCase {
  MockGetWatchListStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [SaveWatchlistUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistUseCase extends _i1.Mock
    implements _i5.SaveWatchlistUseCase {
  MockSaveWatchlistUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, String>> execute(
          _i7.MovieDetail? movie, String? category) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie, category]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i4.Future<_i2.Either<_i6.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistUseCase extends _i1.Mock
    implements _i8.RemoveWatchlistUseCase {
  MockRemoveWatchlistUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, String>> execute(_i7.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i4.Future<_i2.Either<_i6.Failure, String>>);
}
